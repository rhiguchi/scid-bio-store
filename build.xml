<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     2012/01/26 16:31:05                                                        

     ScienceDesign GUI    
     GUI library
                   
     Higuchi Ryusuke                                                                
     ====================================================================== -->
<project name="scid-bio-store" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            SciendeDesign Bio library
    </description>

    <property name="module.version.target" value="0.3" />
    
    <property file="build.properties"/>
    <property file="project/build.default.properties"/>

    <!-- Classpath -->
    <path id="run.test.classpath">
        <pathelement location="${classes.test.dir}" />
        <pathelement location="${src.test.resources.dir}" />
    </path>

    <!-- ================================= 
          target: h2-server              
         ================================= -->
    <target name="h2-server-start" description="run h2 database server">
        <ivy:resolve conf="h2" />
        <ivy:cachepath pathid="lib.h2.classpath" conf="h2" />
        
        <java fork="true" spawn="true" classname="org.h2.tools.Server">
            <classpath refid="lib.h2.classpath"></classpath>
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            <arg line="${h2.server.argline}"/>
        </java>
        
        <echo level="info" message="start H2 database server" />
    </target>

    <!-- ================================= 
          target: h2-server              
         ================================= -->
    <target name="h2-server-stop" description="stop h2 database server">
        <ivy:resolve conf="h2" />
        <ivy:cachepath pathid="lib.h2.classpath" conf="h2" />
        
        <java classname="org.h2.tools.Server" failonerror="yes">
            <classpath refid="lib.h2.classpath"></classpath>
            <arg value="-tcpShutdown"/>
            <arg value="tcp://localhost:9092"/>
        </java>
    </target>

    <target name="create-schema" depends="" description="description">
        <ivy:resolve conf="h2" />
        <ivy:cachepath pathid="lib.h2.classpath" conf="h2" />
        
        <property name="codegen.database.file" value="jdbc:h2:file:${build.dir}/tmp/codegen" />
        
        <delete dir="build/tmp" includes="codegen.*" />
        
        <sql userid="genomemuseum" password="" url="${codegen.database.file}" driver="org.h2.Driver">
            <classpath refid="lib.h2.classpath"/>
            <transaction src="src/main/resources/jp/scid/bio/store/sql/schema.sql" />
        </sql>
    </target>

    
    <!-- ================================= 
          target: jooq-codegen              
         ================================= -->
    <target name="generate-jooq-classes" description="generate jooq code">
        <ivy:retrieve conf="jooq-codegen" symlink="true" />
        <ivy:cachepath pathid="lib.jooq-codegen.classpath" conf="jooq-codegen" />

        <antcall target="create-schema"></antcall>

        <java fork="true" classname="org.jooq.util.GenerationTool" failonerror="yes">
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            <classpath refid="lib.jooq-codegen.classpath"></classpath>
            <classpath location="/"></classpath>
            <arg value="${project.dir}/jooq-codegen.xml"/>
        </java>
        
    </target>

    <!-- ================================= 
          target: clean-jooq-classes              
         ================================= -->
    <target name="clean-jooq-classes" description="delete generated jooq code">
        <delete includeemptydirs="true" dir="${src.main.java.dir}/jp/scid/bio/store/jooq">
	</delete>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
        <mkdir dir="${src.main.resources.dir}"/>
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" description="clean the project">
        <delete includeemptydirs="true" dir="${build.dir}"/>
        <delete includeemptydirs="true" dir="${dist.dir}"/>
    </target>

    <target name="clean-lib" description="clean lib dir">
        <delete dir="${lib.dir}"/>
    </target>
    
    <!-- ================================= 
          target: Resolve dependency              
         ================================= -->
    <target name="retrieve" description="retrieve dependencies with ivy">
        <ivy:retrieve symlink="true" />
    </target>

    <!-- ================================= 
          target: compile              
         ================================= -->
    <target name="compile" depends="init" description="compile the project">
        <mkdir dir="${classes.main.dir}"/>

        <copy todir="${classes.main.dir}">
            <fileset dir="${src.main.java.dir}" excludes="**/*.java" />
            <fileset dir="${src.main.resources.dir}"/>
        </copy>

        <path id="lib.compile.path">
            <fileset dir="${lib.compile.dir}" includes="**/*.jar" />
        </path>
        
        <javac destdir="${classes.main.dir}" source="1.6" target="1.6"
                encoding="UTF-8" debug="true" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <src path="${src.main.java.dir}" />
            
            <classpath refid="lib.compile.path" />
        </javac>
    </target>

    <!-- ================================= 
          target: create jar file              
         ================================= -->
    <target name="jar" depends="compile" description="make a jar file for this project">
        <jar destfile="${package.file}">
            <fileset dir="${classes.main.dir}" />
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Build-Version" value="${module.version.target}" />
            </manifest>
        </jar>
    </target>

    <!-- ================================= 
          target: package-sources
         ================================= -->
    <target name="jar-sources" depends="init" description="description">
        <zip destfile="${source.file}">
            <fileset dir="${src.main.java.dir}" includes="**/*.java" />
        </zip>
    </target>

    <!-- ================================= 
          target: create Javadoc              
         ================================= -->
    <target name="javadoc" depends="compile" description="Create Javadoc">
        <javadoc destdir="${javadoc.dir}" encoding="UTF-8" source="1.6" author="true" version="true"
                access="${javadoc.access}" docencoding="UTF-8" charset="UTF-8" doctitle="${javadoc.title}">
            <arg value="-J-Dfile.encoding=UTF-8"/>
            <classpath refid="lib.compile.path" />
            <sourcepath path="${src.main.java.dir}"/>
            <link href="${javadoc.api-ref.javase}"/>
        </javadoc>
    </target>
    
    <!-- ================================= 
          target: package-javadoc
         ================================= -->
    <target name="jar-javadoc" depends="javadoc" description="description">
        <jar basedir="${javadoc.dir}" destfile="${javadoc.file}"/>
    </target>

    <!-- ================================= 
          target: Compile for test              
         ================================= -->
    <target name="test-compile" depends="" description="description">
        <mkdir dir="${classes.test.dir}"/>

        <copy todir="${classes.test.dir}">
            <fileset dir="${src.test.java.dir}" excludes="**/*.java" />
            <fileset dir="${src.test.resources.dir}"/>
        </copy>

        <path id="lib.test.path">
            <fileset dir="${lib.test.dir}" includes="**/*.jar" />
            <pathelement path="${package.file}"/>
        </path>
        
        <javac destdir="${classes.test.dir}" source="1.6" target="1.6"
                encoding="UTF-8" debug="true" includeantruntime="false">
            <src path="${src.test.java.dir}" />
            
            <classpath refid="lib.test.path" />
        </javac>
    </target>

    <!-- ================================= 
          target: test              
         ================================= -->
    <target name="test" depends="test-compile" description="Run all tests">
        <mkdir dir="${test.report.dir}"/>

        <path id="run.test.classpath">
            <pathelement location="${classes.test.dir}" />
            <pathelement location="${src.test.resources.dir}" />
            <path refid="lib.test.path"/>
        </path>
            
        <junit printsummary="yes" >
            <classpath refid="run.test.classpath" />

            <batchtest todir="${test.report.dir}">
                <formatter type="xml" usefile="true"/>
                <fileset dir="${classes.test.dir}" />
            </batchtest>
        </junit>
    </target>


    <target name="dist" depends="">
        <property name="version" value="${module.version.target}" />
        <ivy:info/>
        <ivy:deliver delivertarget="default" pubrevision="0.2"/>
        <copy file="${package.file}" tofile="${ivy.distrib.dir}/jars/${ant.project.name}-${version}.jar" />
        <copy file="${source.file}" tofile="${ivy.distrib.dir}/sources/${ant.project.name}-sources-${version}.jar" />
        <copy file="${javadoc.file}" tofile="${ivy.distrib.dir}/javadocs/${ant.project.name}-javadocs-${version}.jar" />
    </target>
    
    <!-- ================================= 
           target: publish-local
          ================================= -->
    <target name="publish-local" depends="local-version, dist"
            description="publish this project in the local ivy repository">
        <ivy:info/>
        <ivy:publish
            resolver="local"
            pubrevision="${version}"
            pubdate="${now}"
            status="integration"
            forcedeliver="true">
        </ivy:publish>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>

    <!-- ================================= 
      target: clean-local              
     ================================= -->
    <target name="clean-local" description="cleans the local repository for the current module">
        <ivy:info file="${ivy.file}" />
        <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}" />
    </target>

    <!-- ================================= 
          target: publish              
         ================================= -->
    <target name="publish" depends="version, dist" description="publish this project in the ivy repository">
        <ivy:publish
            resolver="shared"
            pubrevision="${version}"
            status="release" />
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <target name="ivy-new-version" unless="ivy.new.revision">
        <!-- default module version prefix value -->
        <property name="module.version.prefix" value="${module.version.target}." />

        <!-- asks to ivy an available version number -->
        <ivy:info file="${ivy.file}" />
        <ivy:buildnumber
            organisation="${ivy.organisation}" module="${ivy.module}"
            revision="${module.version.prefix}" defaultBuildNumber="1" revSep="" />
    </target>

    <target name="local-version">
        <tstamp>
            <format property="now" pattern="yyyyMMddHHmmss" />
        </tstamp>
        <property name="version" value="${module.version.target}-local-${now}" />
    </target>

    <target name="version">
        <property name="version" value="${module.version.target}" />
    </target>
    
    <target name="build" depends="retrieve, jar, jar-javadoc, jar-sources"
            description="make a jar file for this project">
    </target>
</project>

